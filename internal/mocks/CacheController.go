// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	model "github.com/gotway/gotway/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// CacheController is an autogenerated mock type for the CacheController type
type CacheController struct {
	mock.Mock
}

// DeleteCacheByPath provides a mock function with given fields: paths
func (_m *CacheController) DeleteCacheByPath(paths []model.CachePath) error {
	ret := _m.Called(paths)

	var r0 error
	if rf, ok := ret.Get(0).(func([]model.CachePath) error); ok {
		r0 = rf(paths)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCacheByTags provides a mock function with given fields: tags
func (_m *CacheController) DeleteCacheByTags(tags []string) error {
	ret := _m.Called(tags)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCache provides a mock function with given fields: r, pathPrefix, serviceKey
func (_m *CacheController) GetCache(r *http.Request, pathPrefix string, serviceKey string) (model.Cache, error) {
	ret := _m.Called(r, pathPrefix, serviceKey)

	var r0 model.Cache
	if rf, ok := ret.Get(0).(func(*http.Request, string, string) model.Cache); ok {
		r0 = rf(r, pathPrefix, serviceKey)
	} else {
		r0 = ret.Get(0).(model.Cache)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string, string) error); ok {
		r1 = rf(r, pathPrefix, serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCacheDetail provides a mock function with given fields: r, pathPrefix, serviceKey
func (_m *CacheController) GetCacheDetail(r *http.Request, pathPrefix string, serviceKey string) (model.CacheDetail, error) {
	ret := _m.Called(r, pathPrefix, serviceKey)

	var r0 model.CacheDetail
	if rf, ok := ret.Get(0).(func(*http.Request, string, string) model.CacheDetail); ok {
		r0 = rf(r, pathPrefix, serviceKey)
	} else {
		r0 = ret.Get(0).(model.CacheDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string, string) error); ok {
		r1 = rf(r, pathPrefix, serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleResponse provides a mock function with given fields: serviceKey, r
func (_m *CacheController) HandleResponse(serviceKey string, r *http.Response) error {
	ret := _m.Called(serviceKey, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *http.Response) error); ok {
		r0 = rf(serviceKey, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsCacheableRequest provides a mock function with given fields: r
func (_m *CacheController) IsCacheableRequest(r *http.Request) bool {
	ret := _m.Called(r)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Request) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListenResponses provides a mock function with given fields:
func (_m *CacheController) ListenResponses() {
	_m.Called()
}

// isCacheableResponse provides a mock function with given fields: r, serviceKey
func (_m *CacheController) isCacheableResponse(r *http.Response, serviceKey string) bool {
	ret := _m.Called(r, serviceKey)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Response, string) bool); ok {
		r0 = rf(r, serviceKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

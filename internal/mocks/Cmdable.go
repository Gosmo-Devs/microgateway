// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	v8 "github.com/go-redis/redis/v8"
)

// Cmdable is an autogenerated mock type for the Cmdable type
type Cmdable struct {
	mock.Mock
}

// AllExist provides a mock function with given fields: ctx, keys
func (_m *Cmdable) AllExist(ctx context.Context, keys ...string) (bool, int, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, ...string) bool); ok {
		r0 = rf(ctx, keys...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, ...string) int); ok {
		r1 = rf(ctx, keys...)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, ...string) error); ok {
		r2 = rf(ctx, keys...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Append provides a mock function with given fields: ctx, key, value
func (_m *Cmdable) Append(ctx context.Context, key string, value string) *v8.IntCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// BLPop provides a mock function with given fields: ctx, timeout, keys
func (_m *Cmdable) BLPop(ctx context.Context, timeout time.Duration, keys ...string) *v8.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// BRPop provides a mock function with given fields: ctx, timeout, keys
func (_m *Cmdable) BRPop(ctx context.Context, timeout time.Duration, keys ...string) *v8.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// BRPopLPush provides a mock function with given fields: ctx, source, destination, timeout
func (_m *Cmdable) BRPopLPush(ctx context.Context, source string, destination string, timeout time.Duration) *v8.StringCmd {
	ret := _m.Called(ctx, source, destination, timeout)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) *v8.StringCmd); ok {
		r0 = rf(ctx, source, destination, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// BZPopMax provides a mock function with given fields: ctx, timeout, keys
func (_m *Cmdable) BZPopMax(ctx context.Context, timeout time.Duration, keys ...string) *v8.ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *v8.ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZWithKeyCmd)
		}
	}

	return r0
}

// BZPopMin provides a mock function with given fields: ctx, timeout, keys
func (_m *Cmdable) BZPopMin(ctx context.Context, timeout time.Duration, keys ...string) *v8.ZWithKeyCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, timeout)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.ZWithKeyCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, ...string) *v8.ZWithKeyCmd); ok {
		r0 = rf(ctx, timeout, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZWithKeyCmd)
		}
	}

	return r0
}

// BgRewriteAOF provides a mock function with given fields: ctx
func (_m *Cmdable) BgRewriteAOF(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// BgSave provides a mock function with given fields: ctx
func (_m *Cmdable) BgSave(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// BitCount provides a mock function with given fields: ctx, key, bitCount
func (_m *Cmdable) BitCount(ctx context.Context, key string, bitCount *v8.BitCount) *v8.IntCmd {
	ret := _m.Called(ctx, key, bitCount)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.BitCount) *v8.IntCmd); ok {
		r0 = rf(ctx, key, bitCount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// BitField provides a mock function with given fields: ctx, key, args
func (_m *Cmdable) BitField(ctx context.Context, key string, args ...interface{}) *v8.IntSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntSliceCmd); ok {
		r0 = rf(ctx, key, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntSliceCmd)
		}
	}

	return r0
}

// BitOpAnd provides a mock function with given fields: ctx, destKey, keys
func (_m *Cmdable) BitOpAnd(ctx context.Context, destKey string, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// BitOpNot provides a mock function with given fields: ctx, destKey, key
func (_m *Cmdable) BitOpNot(ctx context.Context, destKey string, key string) *v8.IntCmd {
	ret := _m.Called(ctx, destKey, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, destKey, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// BitOpOr provides a mock function with given fields: ctx, destKey, keys
func (_m *Cmdable) BitOpOr(ctx context.Context, destKey string, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// BitOpXor provides a mock function with given fields: ctx, destKey, keys
func (_m *Cmdable) BitOpXor(ctx context.Context, destKey string, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destKey)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, destKey, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// BitPos provides a mock function with given fields: ctx, key, bit, pos
func (_m *Cmdable) BitPos(ctx context.Context, key string, bit int64, pos ...int64) *v8.IntCmd {
	_va := make([]interface{}, len(pos))
	for _i := range pos {
		_va[_i] = pos[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key, bit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, ...int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, bit, pos...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ClientGetName provides a mock function with given fields: ctx
func (_m *Cmdable) ClientGetName(ctx context.Context) *v8.StringCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// ClientID provides a mock function with given fields: ctx
func (_m *Cmdable) ClientID(ctx context.Context) *v8.IntCmd {
	ret := _m.Called(ctx)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ClientKill provides a mock function with given fields: ctx, ipPort
func (_m *Cmdable) ClientKill(ctx context.Context, ipPort string) *v8.StatusCmd {
	ret := _m.Called(ctx, ipPort)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, ipPort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClientKillByFilter provides a mock function with given fields: ctx, keys
func (_m *Cmdable) ClientKillByFilter(ctx context.Context, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ClientList provides a mock function with given fields: ctx
func (_m *Cmdable) ClientList(ctx context.Context) *v8.StringCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// ClientPause provides a mock function with given fields: ctx, dur
func (_m *Cmdable) ClientPause(ctx context.Context, dur time.Duration) *v8.BoolCmd {
	ret := _m.Called(ctx, dur)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) *v8.BoolCmd); ok {
		r0 = rf(ctx, dur)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// ClusterAddSlots provides a mock function with given fields: ctx, slots
func (_m *Cmdable) ClusterAddSlots(ctx context.Context, slots ...int) *v8.StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *v8.StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterAddSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *Cmdable) ClusterAddSlotsRange(ctx context.Context, min int, max int) *v8.StatusCmd {
	ret := _m.Called(ctx, min, max)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *v8.StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterCountFailureReports provides a mock function with given fields: ctx, nodeID
func (_m *Cmdable) ClusterCountFailureReports(ctx context.Context, nodeID string) *v8.IntCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ClusterCountKeysInSlot provides a mock function with given fields: ctx, slot
func (_m *Cmdable) ClusterCountKeysInSlot(ctx context.Context, slot int) *v8.IntCmd {
	ret := _m.Called(ctx, slot)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, int) *v8.IntCmd); ok {
		r0 = rf(ctx, slot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ClusterDelSlots provides a mock function with given fields: ctx, slots
func (_m *Cmdable) ClusterDelSlots(ctx context.Context, slots ...int) *v8.StatusCmd {
	_va := make([]interface{}, len(slots))
	for _i := range slots {
		_va[_i] = slots[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...int) *v8.StatusCmd); ok {
		r0 = rf(ctx, slots...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterDelSlotsRange provides a mock function with given fields: ctx, min, max
func (_m *Cmdable) ClusterDelSlotsRange(ctx context.Context, min int, max int) *v8.StatusCmd {
	ret := _m.Called(ctx, min, max)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *v8.StatusCmd); ok {
		r0 = rf(ctx, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterFailover provides a mock function with given fields: ctx
func (_m *Cmdable) ClusterFailover(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterForget provides a mock function with given fields: ctx, nodeID
func (_m *Cmdable) ClusterForget(ctx context.Context, nodeID string) *v8.StatusCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterGetKeysInSlot provides a mock function with given fields: ctx, slot, count
func (_m *Cmdable) ClusterGetKeysInSlot(ctx context.Context, slot int, count int) *v8.StringSliceCmd {
	ret := _m.Called(ctx, slot, count)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, slot, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ClusterInfo provides a mock function with given fields: ctx
func (_m *Cmdable) ClusterInfo(ctx context.Context) *v8.StringCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// ClusterKeySlot provides a mock function with given fields: ctx, key
func (_m *Cmdable) ClusterKeySlot(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ClusterMeet provides a mock function with given fields: ctx, host, port
func (_m *Cmdable) ClusterMeet(ctx context.Context, host string, port string) *v8.StatusCmd {
	ret := _m.Called(ctx, host, port)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterNodes provides a mock function with given fields: ctx
func (_m *Cmdable) ClusterNodes(ctx context.Context) *v8.StringCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// ClusterReplicate provides a mock function with given fields: ctx, nodeID
func (_m *Cmdable) ClusterReplicate(ctx context.Context, nodeID string) *v8.StatusCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterResetHard provides a mock function with given fields: ctx
func (_m *Cmdable) ClusterResetHard(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterResetSoft provides a mock function with given fields: ctx
func (_m *Cmdable) ClusterResetSoft(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterSaveConfig provides a mock function with given fields: ctx
func (_m *Cmdable) ClusterSaveConfig(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ClusterSlaves provides a mock function with given fields: ctx, nodeID
func (_m *Cmdable) ClusterSlaves(ctx context.Context, nodeID string) *v8.StringSliceCmd {
	ret := _m.Called(ctx, nodeID)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, nodeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ClusterSlots provides a mock function with given fields: ctx
func (_m *Cmdable) ClusterSlots(ctx context.Context) *v8.ClusterSlotsCmd {
	ret := _m.Called(ctx)

	var r0 *v8.ClusterSlotsCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.ClusterSlotsCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ClusterSlotsCmd)
		}
	}

	return r0
}

// Command provides a mock function with given fields: ctx
func (_m *Cmdable) Command(ctx context.Context) *v8.CommandsInfoCmd {
	ret := _m.Called(ctx)

	var r0 *v8.CommandsInfoCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.CommandsInfoCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.CommandsInfoCmd)
		}
	}

	return r0
}

// ConfigGet provides a mock function with given fields: ctx, parameter
func (_m *Cmdable) ConfigGet(ctx context.Context, parameter string) *v8.SliceCmd {
	ret := _m.Called(ctx, parameter)

	var r0 *v8.SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.SliceCmd); ok {
		r0 = rf(ctx, parameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.SliceCmd)
		}
	}

	return r0
}

// ConfigResetStat provides a mock function with given fields: ctx
func (_m *Cmdable) ConfigResetStat(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ConfigRewrite provides a mock function with given fields: ctx
func (_m *Cmdable) ConfigRewrite(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ConfigSet provides a mock function with given fields: ctx, parameter, value
func (_m *Cmdable) ConfigSet(ctx context.Context, parameter string, value string) *v8.StatusCmd {
	ret := _m.Called(ctx, parameter, value)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, parameter, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// DBSize provides a mock function with given fields: ctx
func (_m *Cmdable) DBSize(ctx context.Context) *v8.IntCmd {
	ret := _m.Called(ctx)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// DebugObject provides a mock function with given fields: ctx, key
func (_m *Cmdable) DebugObject(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// Decr provides a mock function with given fields: ctx, key
func (_m *Cmdable) Decr(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// DecrBy provides a mock function with given fields: ctx, key, decrement
func (_m *Cmdable) DecrBy(ctx context.Context, key string, decrement int64) *v8.IntCmd {
	ret := _m.Called(ctx, key, decrement)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, decrement)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// Del provides a mock function with given fields: ctx, keys
func (_m *Cmdable) Del(ctx context.Context, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// Dump provides a mock function with given fields: ctx, key
func (_m *Cmdable) Dump(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// Echo provides a mock function with given fields: ctx, message
func (_m *Cmdable) Echo(ctx context.Context, message interface{}) *v8.StringCmd {
	ret := _m.Called(ctx, message)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *v8.StringCmd); ok {
		r0 = rf(ctx, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// Eval provides a mock function with given fields: ctx, script, keys, args
func (_m *Cmdable) Eval(ctx context.Context, script string, keys []string, args ...interface{}) *v8.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, script, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *v8.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *v8.Cmd); ok {
		r0 = rf(ctx, script, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.Cmd)
		}
	}

	return r0
}

// EvalSha provides a mock function with given fields: ctx, sha1, keys, args
func (_m *Cmdable) EvalSha(ctx context.Context, sha1 string, keys []string, args ...interface{}) *v8.Cmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, sha1, keys)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *v8.Cmd
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, ...interface{}) *v8.Cmd); ok {
		r0 = rf(ctx, sha1, keys, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.Cmd)
		}
	}

	return r0
}

// Exists provides a mock function with given fields: ctx, keys
func (_m *Cmdable) Exists(ctx context.Context, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// Expire provides a mock function with given fields: ctx, key, expiration
func (_m *Cmdable) Expire(ctx context.Context, key string, expiration time.Duration) *v8.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// ExpireAt provides a mock function with given fields: ctx, key, tm
func (_m *Cmdable) ExpireAt(ctx context.Context, key string, tm time.Time) *v8.BoolCmd {
	ret := _m.Called(ctx, key, tm)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// FlushAll provides a mock function with given fields: ctx
func (_m *Cmdable) FlushAll(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// FlushAllAsync provides a mock function with given fields: ctx
func (_m *Cmdable) FlushAllAsync(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// FlushDB provides a mock function with given fields: ctx
func (_m *Cmdable) FlushDB(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// FlushDBAsync provides a mock function with given fields: ctx
func (_m *Cmdable) FlushDBAsync(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// GeoAdd provides a mock function with given fields: ctx, key, geoLocation
func (_m *Cmdable) GeoAdd(ctx context.Context, key string, geoLocation ...*v8.GeoLocation) *v8.IntCmd {
	_va := make([]interface{}, len(geoLocation))
	for _i := range geoLocation {
		_va[_i] = geoLocation[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*v8.GeoLocation) *v8.IntCmd); ok {
		r0 = rf(ctx, key, geoLocation...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// GeoDist provides a mock function with given fields: ctx, key, member1, member2, unit
func (_m *Cmdable) GeoDist(ctx context.Context, key string, member1 string, member2 string, unit string) *v8.FloatCmd {
	ret := _m.Called(ctx, key, member1, member2, unit)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, member1, member2, unit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// GeoHash provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) GeoHash(ctx context.Context, key string, members ...string) *v8.StringSliceCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// GeoPos provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) GeoPos(ctx context.Context, key string, members ...string) *v8.GeoPosCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.GeoPosCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.GeoPosCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.GeoPosCmd)
		}
	}

	return r0
}

// GeoRadius provides a mock function with given fields: ctx, key, longitude, latitude, query
func (_m *Cmdable) GeoRadius(ctx context.Context, key string, longitude float64, latitude float64, query *v8.GeoRadiusQuery) *v8.GeoLocationCmd {
	ret := _m.Called(ctx, key, longitude, latitude, query)

	var r0 *v8.GeoLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64, *v8.GeoRadiusQuery) *v8.GeoLocationCmd); ok {
		r0 = rf(ctx, key, longitude, latitude, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.GeoLocationCmd)
		}
	}

	return r0
}

// GeoRadiusByMember provides a mock function with given fields: ctx, key, member, query
func (_m *Cmdable) GeoRadiusByMember(ctx context.Context, key string, member string, query *v8.GeoRadiusQuery) *v8.GeoLocationCmd {
	ret := _m.Called(ctx, key, member, query)

	var r0 *v8.GeoLocationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v8.GeoRadiusQuery) *v8.GeoLocationCmd); ok {
		r0 = rf(ctx, key, member, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.GeoLocationCmd)
		}
	}

	return r0
}

// GeoRadiusByMemberStore provides a mock function with given fields: ctx, key, member, query
func (_m *Cmdable) GeoRadiusByMemberStore(ctx context.Context, key string, member string, query *v8.GeoRadiusQuery) *v8.IntCmd {
	ret := _m.Called(ctx, key, member, query)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v8.GeoRadiusQuery) *v8.IntCmd); ok {
		r0 = rf(ctx, key, member, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// GeoRadiusStore provides a mock function with given fields: ctx, key, longitude, latitude, query
func (_m *Cmdable) GeoRadiusStore(ctx context.Context, key string, longitude float64, latitude float64, query *v8.GeoRadiusQuery) *v8.IntCmd {
	ret := _m.Called(ctx, key, longitude, latitude, query)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, float64, *v8.GeoRadiusQuery) *v8.IntCmd); ok {
		r0 = rf(ctx, key, longitude, latitude, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, key
func (_m *Cmdable) Get(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// GetBit provides a mock function with given fields: ctx, key, offset
func (_m *Cmdable) GetBit(ctx context.Context, key string, offset int64) *v8.IntCmd {
	ret := _m.Called(ctx, key, offset)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// GetDel provides a mock function with given fields: ctx, key
func (_m *Cmdable) GetDel(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// GetEx provides a mock function with given fields: ctx, key, expiration
func (_m *Cmdable) GetEx(ctx context.Context, key string, expiration time.Duration) *v8.StringCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *v8.StringCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// GetRange provides a mock function with given fields: ctx, key, start, end
func (_m *Cmdable) GetRange(ctx context.Context, key string, start int64, end int64) *v8.StringCmd {
	ret := _m.Called(ctx, key, start, end)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.StringCmd); ok {
		r0 = rf(ctx, key, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// GetSet provides a mock function with given fields: ctx, key, value
func (_m *Cmdable) GetSet(ctx context.Context, key string, value interface{}) *v8.StringCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *v8.StringCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// HDel provides a mock function with given fields: ctx, key, fields
func (_m *Cmdable) HDel(ctx context.Context, key string, fields ...string) *v8.IntCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// HExists provides a mock function with given fields: ctx, key, field
func (_m *Cmdable) HExists(ctx context.Context, key string, field string) *v8.BoolCmd {
	ret := _m.Called(ctx, key, field)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// HGet provides a mock function with given fields: ctx, key, field
func (_m *Cmdable) HGet(ctx context.Context, key string, field string) *v8.StringCmd {
	ret := _m.Called(ctx, key, field)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key, field)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// HGetAll provides a mock function with given fields: ctx, key
func (_m *Cmdable) HGetAll(ctx context.Context, key string) *v8.StringStringMapCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringStringMapCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringStringMapCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringStringMapCmd)
		}
	}

	return r0
}

// HIncrBy provides a mock function with given fields: ctx, key, field, incr
func (_m *Cmdable) HIncrBy(ctx context.Context, key string, field string, incr int64) *v8.IntCmd {
	ret := _m.Called(ctx, key, field, incr)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, field, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// HIncrByFloat provides a mock function with given fields: ctx, key, field, incr
func (_m *Cmdable) HIncrByFloat(ctx context.Context, key string, field string, incr float64) *v8.FloatCmd {
	ret := _m.Called(ctx, key, field, incr)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, float64) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, field, incr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// HKeys provides a mock function with given fields: ctx, key
func (_m *Cmdable) HKeys(ctx context.Context, key string) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// HLen provides a mock function with given fields: ctx, key
func (_m *Cmdable) HLen(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// HMGet provides a mock function with given fields: ctx, key, fields
func (_m *Cmdable) HMGet(ctx context.Context, key string, fields ...string) *v8.SliceCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.SliceCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.SliceCmd)
		}
	}

	return r0
}

// HMSet provides a mock function with given fields: ctx, key, values
func (_m *Cmdable) HMSet(ctx context.Context, key string, values ...interface{}) *v8.BoolCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// HRandField provides a mock function with given fields: ctx, key, count, withValues
func (_m *Cmdable) HRandField(ctx context.Context, key string, count int, withValues bool) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, count, withValues)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, count, withValues)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// HScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *Cmdable) HScan(ctx context.Context, key string, cursor uint64, match string, count int64) *v8.ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	var r0 *v8.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *v8.ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ScanCmd)
		}
	}

	return r0
}

// HSet provides a mock function with given fields: ctx, key, values
func (_m *Cmdable) HSet(ctx context.Context, key string, values ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// HSetNX provides a mock function with given fields: ctx, key, field, value
func (_m *Cmdable) HSetNX(ctx context.Context, key string, field string, value interface{}) *v8.BoolCmd {
	ret := _m.Called(ctx, key, field, value)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, field, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// HSetTTL provides a mock function with given fields: ctx, key, values, TTL
func (_m *Cmdable) HSetTTL(ctx context.Context, key string, values map[string]interface{}, TTL time.Duration) error {
	ret := _m.Called(ctx, key, values, TTL)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}, time.Duration) error); ok {
		r0 = rf(ctx, key, values, TTL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HVals provides a mock function with given fields: ctx, key
func (_m *Cmdable) HVals(ctx context.Context, key string) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// Incr provides a mock function with given fields: ctx, key
func (_m *Cmdable) Incr(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// IncrBy provides a mock function with given fields: ctx, key, value
func (_m *Cmdable) IncrBy(ctx context.Context, key string, value int64) *v8.IntCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// IncrByFloat provides a mock function with given fields: ctx, key, value
func (_m *Cmdable) IncrByFloat(ctx context.Context, key string, value float64) *v8.FloatCmd {
	ret := _m.Called(ctx, key, value)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// Info provides a mock function with given fields: ctx, section
func (_m *Cmdable) Info(ctx context.Context, section ...string) *v8.StringCmd {
	_va := make([]interface{}, len(section))
	for _i := range section {
		_va[_i] = section[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.StringCmd); ok {
		r0 = rf(ctx, section...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// Keys provides a mock function with given fields: ctx, pattern
func (_m *Cmdable) Keys(ctx context.Context, pattern string) *v8.StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// LIndex provides a mock function with given fields: ctx, key, index
func (_m *Cmdable) LIndex(ctx context.Context, key string, index int64) *v8.StringCmd {
	ret := _m.Called(ctx, key, index)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.StringCmd); ok {
		r0 = rf(ctx, key, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// LInsert provides a mock function with given fields: ctx, key, op, pivot, value
func (_m *Cmdable) LInsert(ctx context.Context, key string, op string, pivot interface{}, value interface{}) *v8.IntCmd {
	ret := _m.Called(ctx, key, op, pivot, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, op, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LInsertAfter provides a mock function with given fields: ctx, key, pivot, value
func (_m *Cmdable) LInsertAfter(ctx context.Context, key string, pivot interface{}, value interface{}) *v8.IntCmd {
	ret := _m.Called(ctx, key, pivot, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LInsertBefore provides a mock function with given fields: ctx, key, pivot, value
func (_m *Cmdable) LInsertBefore(ctx context.Context, key string, pivot interface{}, value interface{}) *v8.IntCmd {
	ret := _m.Called(ctx, key, pivot, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, pivot, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LLen provides a mock function with given fields: ctx, key
func (_m *Cmdable) LLen(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LMove provides a mock function with given fields: ctx, source, destination, srcpos, destpos
func (_m *Cmdable) LMove(ctx context.Context, source string, destination string, srcpos string, destpos string) *v8.StringCmd {
	ret := _m.Called(ctx, source, destination, srcpos, destpos)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *v8.StringCmd); ok {
		r0 = rf(ctx, source, destination, srcpos, destpos)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// LPop provides a mock function with given fields: ctx, key
func (_m *Cmdable) LPop(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// LPopCount provides a mock function with given fields: ctx, key, count
func (_m *Cmdable) LPopCount(ctx context.Context, key string, count int) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// LPos provides a mock function with given fields: ctx, key, value, args
func (_m *Cmdable) LPos(ctx context.Context, key string, value string, args v8.LPosArgs) *v8.IntCmd {
	ret := _m.Called(ctx, key, value, args)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, v8.LPosArgs) *v8.IntCmd); ok {
		r0 = rf(ctx, key, value, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LPosCount provides a mock function with given fields: ctx, key, value, count, args
func (_m *Cmdable) LPosCount(ctx context.Context, key string, value string, count int64, args v8.LPosArgs) *v8.IntSliceCmd {
	ret := _m.Called(ctx, key, value, count, args)

	var r0 *v8.IntSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, v8.LPosArgs) *v8.IntSliceCmd); ok {
		r0 = rf(ctx, key, value, count, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntSliceCmd)
		}
	}

	return r0
}

// LPush provides a mock function with given fields: ctx, key, values
func (_m *Cmdable) LPush(ctx context.Context, key string, values ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LPushX provides a mock function with given fields: ctx, key, values
func (_m *Cmdable) LPushX(ctx context.Context, key string, values ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LRange provides a mock function with given fields: ctx, key, start, stop
func (_m *Cmdable) LRange(ctx context.Context, key string, start int64, stop int64) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// LRem provides a mock function with given fields: ctx, key, count, value
func (_m *Cmdable) LRem(ctx context.Context, key string, count int64, value interface{}) *v8.IntCmd {
	ret := _m.Called(ctx, key, count, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, count, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// LSet provides a mock function with given fields: ctx, key, index, value
func (_m *Cmdable) LSet(ctx context.Context, key string, index int64, value interface{}) *v8.StatusCmd {
	ret := _m.Called(ctx, key, index, value)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, interface{}) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, index, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// LTrim provides a mock function with given fields: ctx, key, start, stop
func (_m *Cmdable) LTrim(ctx context.Context, key string, start int64, stop int64) *v8.StatusCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// LastSave provides a mock function with given fields: ctx
func (_m *Cmdable) LastSave(ctx context.Context) *v8.IntCmd {
	ret := _m.Called(ctx)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// MGet provides a mock function with given fields: ctx, keys
func (_m *Cmdable) MGet(ctx context.Context, keys ...string) *v8.SliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.SliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.SliceCmd)
		}
	}

	return r0
}

// MSet provides a mock function with given fields: ctx, values
func (_m *Cmdable) MSet(ctx context.Context, values ...interface{}) *v8.StatusCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *v8.StatusCmd); ok {
		r0 = rf(ctx, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// MSetNX provides a mock function with given fields: ctx, values
func (_m *Cmdable) MSetNX(ctx context.Context, values ...interface{}) *v8.BoolCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) *v8.BoolCmd); ok {
		r0 = rf(ctx, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// MemoryUsage provides a mock function with given fields: ctx, key, samples
func (_m *Cmdable) MemoryUsage(ctx context.Context, key string, samples ...int) *v8.IntCmd {
	_va := make([]interface{}, len(samples))
	for _i := range samples {
		_va[_i] = samples[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int) *v8.IntCmd); ok {
		r0 = rf(ctx, key, samples...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// Migrate provides a mock function with given fields: ctx, host, port, key, db, timeout
func (_m *Cmdable) Migrate(ctx context.Context, host string, port string, key string, db int, timeout time.Duration) *v8.StatusCmd {
	ret := _m.Called(ctx, host, port, key, db, timeout)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int, time.Duration) *v8.StatusCmd); ok {
		r0 = rf(ctx, host, port, key, db, timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// Move provides a mock function with given fields: ctx, key, db
func (_m *Cmdable) Move(ctx context.Context, key string, db int) *v8.BoolCmd {
	ret := _m.Called(ctx, key, db)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// ObjectEncoding provides a mock function with given fields: ctx, key
func (_m *Cmdable) ObjectEncoding(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// ObjectIdleTime provides a mock function with given fields: ctx, key
func (_m *Cmdable) ObjectIdleTime(ctx context.Context, key string) *v8.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.DurationCmd)
		}
	}

	return r0
}

// ObjectRefCount provides a mock function with given fields: ctx, key
func (_m *Cmdable) ObjectRefCount(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// OptimisticLockTx provides a mock function with given fields: ctx, maxRetries, txFn, keys
func (_m *Cmdable) OptimisticLockTx(ctx context.Context, maxRetries int, txFn func(*v8.Tx) error, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, maxRetries, txFn)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func(*v8.Tx) error, ...string) error); ok {
		r0 = rf(ctx, maxRetries, txFn, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PExpire provides a mock function with given fields: ctx, key, expiration
func (_m *Cmdable) PExpire(ctx context.Context, key string, expiration time.Duration) *v8.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// PExpireAt provides a mock function with given fields: ctx, key, tm
func (_m *Cmdable) PExpireAt(ctx context.Context, key string, tm time.Time) *v8.BoolCmd {
	ret := _m.Called(ctx, key, tm)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, tm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// PFAdd provides a mock function with given fields: ctx, key, els
func (_m *Cmdable) PFAdd(ctx context.Context, key string, els ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, els...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, els...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// PFCount provides a mock function with given fields: ctx, keys
func (_m *Cmdable) PFCount(ctx context.Context, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// PFMerge provides a mock function with given fields: ctx, dest, keys
func (_m *Cmdable) PFMerge(ctx context.Context, dest string, keys ...string) *v8.StatusCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, dest)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.StatusCmd); ok {
		r0 = rf(ctx, dest, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// PTTL provides a mock function with given fields: ctx, key
func (_m *Cmdable) PTTL(ctx context.Context, key string) *v8.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.DurationCmd)
		}
	}

	return r0
}

// Persist provides a mock function with given fields: ctx, key
func (_m *Cmdable) Persist(ctx context.Context, key string) *v8.BoolCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.BoolCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *Cmdable) Ping(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// Pipeline provides a mock function with given fields:
func (_m *Cmdable) Pipeline() v8.Pipeliner {
	ret := _m.Called()

	var r0 v8.Pipeliner
	if rf, ok := ret.Get(0).(func() v8.Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v8.Pipeliner)
		}
	}

	return r0
}

// Pipelined provides a mock function with given fields: ctx, fn
func (_m *Cmdable) Pipelined(ctx context.Context, fn func(v8.Pipeliner) error) ([]v8.Cmder, error) {
	ret := _m.Called(ctx, fn)

	var r0 []v8.Cmder
	if rf, ok := ret.Get(0).(func(context.Context, func(v8.Pipeliner) error) []v8.Cmder); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v8.Cmder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, func(v8.Pipeliner) error) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PubSubChannels provides a mock function with given fields: ctx, pattern
func (_m *Cmdable) PubSubChannels(ctx context.Context, pattern string) *v8.StringSliceCmd {
	ret := _m.Called(ctx, pattern)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// PubSubNumPat provides a mock function with given fields: ctx
func (_m *Cmdable) PubSubNumPat(ctx context.Context) *v8.IntCmd {
	ret := _m.Called(ctx)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.IntCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// PubSubNumSub provides a mock function with given fields: ctx, channels
func (_m *Cmdable) PubSubNumSub(ctx context.Context, channels ...string) *v8.StringIntMapCmd {
	_va := make([]interface{}, len(channels))
	for _i := range channels {
		_va[_i] = channels[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringIntMapCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.StringIntMapCmd); ok {
		r0 = rf(ctx, channels...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringIntMapCmd)
		}
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, channel, message
func (_m *Cmdable) Publish(ctx context.Context, channel string, message interface{}) *v8.IntCmd {
	ret := _m.Called(ctx, channel, message)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, channel, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// Quit provides a mock function with given fields: ctx
func (_m *Cmdable) Quit(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// RPop provides a mock function with given fields: ctx, key
func (_m *Cmdable) RPop(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// RPopLPush provides a mock function with given fields: ctx, source, destination
func (_m *Cmdable) RPopLPush(ctx context.Context, source string, destination string) *v8.StringCmd {
	ret := _m.Called(ctx, source, destination)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.StringCmd); ok {
		r0 = rf(ctx, source, destination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// RPush provides a mock function with given fields: ctx, key, values
func (_m *Cmdable) RPush(ctx context.Context, key string, values ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// RPushX provides a mock function with given fields: ctx, key, values
func (_m *Cmdable) RPushX(ctx context.Context, key string, values ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// RandomKey provides a mock function with given fields: ctx
func (_m *Cmdable) RandomKey(ctx context.Context) *v8.StringCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StringCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// ReadOnly provides a mock function with given fields: ctx
func (_m *Cmdable) ReadOnly(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ReadWrite provides a mock function with given fields: ctx
func (_m *Cmdable) ReadWrite(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// Rename provides a mock function with given fields: ctx, key, newkey
func (_m *Cmdable) Rename(ctx context.Context, key string, newkey string) *v8.StatusCmd {
	ret := _m.Called(ctx, key, newkey)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, newkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// RenameNX provides a mock function with given fields: ctx, key, newkey
func (_m *Cmdable) RenameNX(ctx context.Context, key string, newkey string) *v8.BoolCmd {
	ret := _m.Called(ctx, key, newkey)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, newkey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// Restore provides a mock function with given fields: ctx, key, ttl, value
func (_m *Cmdable) Restore(ctx context.Context, key string, ttl time.Duration, value string) *v8.StatusCmd {
	ret := _m.Called(ctx, key, ttl, value)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, ttl, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// RestoreReplace provides a mock function with given fields: ctx, key, ttl, value
func (_m *Cmdable) RestoreReplace(ctx context.Context, key string, ttl time.Duration, value string) *v8.StatusCmd {
	ret := _m.Called(ctx, key, ttl, value)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, ttl, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// SAdd provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) SAdd(ctx context.Context, key string, members ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// SAddTTL provides a mock function with given fields: ctx, key, TTL, members
func (_m *Cmdable) SAddTTL(ctx context.Context, key string, TTL time.Duration, members ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, key, TTL)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, ...interface{}) error); ok {
		r0 = rf(ctx, key, TTL, members...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SCard provides a mock function with given fields: ctx, key
func (_m *Cmdable) SCard(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// SDiff provides a mock function with given fields: ctx, keys
func (_m *Cmdable) SDiff(ctx context.Context, keys ...string) *v8.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// SDiffStore provides a mock function with given fields: ctx, destination, keys
func (_m *Cmdable) SDiffStore(ctx context.Context, destination string, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// SInter provides a mock function with given fields: ctx, keys
func (_m *Cmdable) SInter(ctx context.Context, keys ...string) *v8.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// SInterStore provides a mock function with given fields: ctx, destination, keys
func (_m *Cmdable) SInterStore(ctx context.Context, destination string, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// SIsMember provides a mock function with given fields: ctx, key, member
func (_m *Cmdable) SIsMember(ctx context.Context, key string, member interface{}) *v8.BoolCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// SMIsMember provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) SMIsMember(ctx context.Context, key string, members ...interface{}) *v8.BoolSliceCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *v8.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.BoolSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolSliceCmd)
		}
	}

	return r0
}

// SMembers provides a mock function with given fields: ctx, key
func (_m *Cmdable) SMembers(ctx context.Context, key string) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// SMembersMap provides a mock function with given fields: ctx, key
func (_m *Cmdable) SMembersMap(ctx context.Context, key string) *v8.StringStructMapCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringStructMapCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringStructMapCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringStructMapCmd)
		}
	}

	return r0
}

// SMove provides a mock function with given fields: ctx, source, destination, member
func (_m *Cmdable) SMove(ctx context.Context, source string, destination string, member interface{}) *v8.BoolCmd {
	ret := _m.Called(ctx, source, destination, member)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}) *v8.BoolCmd); ok {
		r0 = rf(ctx, source, destination, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// SPop provides a mock function with given fields: ctx, key
func (_m *Cmdable) SPop(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// SPopN provides a mock function with given fields: ctx, key, count
func (_m *Cmdable) SPopN(ctx context.Context, key string, count int64) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// SRandMember provides a mock function with given fields: ctx, key
func (_m *Cmdable) SRandMember(ctx context.Context, key string) *v8.StringCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// SRandMemberN provides a mock function with given fields: ctx, key, count
func (_m *Cmdable) SRandMemberN(ctx context.Context, key string, count int64) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, count)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// SRem provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) SRem(ctx context.Context, key string, members ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// SScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *Cmdable) SScan(ctx context.Context, key string, cursor uint64, match string, count int64) *v8.ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	var r0 *v8.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *v8.ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ScanCmd)
		}
	}

	return r0
}

// SUnion provides a mock function with given fields: ctx, keys
func (_m *Cmdable) SUnion(ctx context.Context, keys ...string) *v8.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// SUnionStore provides a mock function with given fields: ctx, destination, keys
func (_m *Cmdable) SUnionStore(ctx context.Context, destination string, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// Save provides a mock function with given fields: ctx
func (_m *Cmdable) Save(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// Scan provides a mock function with given fields: ctx, cursor, match, count
func (_m *Cmdable) Scan(ctx context.Context, cursor uint64, match string, count int64) *v8.ScanCmd {
	ret := _m.Called(ctx, cursor, match, count)

	var r0 *v8.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64) *v8.ScanCmd); ok {
		r0 = rf(ctx, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ScanCmd)
		}
	}

	return r0
}

// ScanType provides a mock function with given fields: ctx, cursor, match, count, keyType
func (_m *Cmdable) ScanType(ctx context.Context, cursor uint64, match string, count int64, keyType string) *v8.ScanCmd {
	ret := _m.Called(ctx, cursor, match, count, keyType)

	var r0 *v8.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64, string) *v8.ScanCmd); ok {
		r0 = rf(ctx, cursor, match, count, keyType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ScanCmd)
		}
	}

	return r0
}

// ScriptExists provides a mock function with given fields: ctx, hashes
func (_m *Cmdable) ScriptExists(ctx context.Context, hashes ...string) *v8.BoolSliceCmd {
	_va := make([]interface{}, len(hashes))
	for _i := range hashes {
		_va[_i] = hashes[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.BoolSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.BoolSliceCmd); ok {
		r0 = rf(ctx, hashes...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolSliceCmd)
		}
	}

	return r0
}

// ScriptFlush provides a mock function with given fields: ctx
func (_m *Cmdable) ScriptFlush(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ScriptKill provides a mock function with given fields: ctx
func (_m *Cmdable) ScriptKill(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ScriptLoad provides a mock function with given fields: ctx, script
func (_m *Cmdable) ScriptLoad(ctx context.Context, script string) *v8.StringCmd {
	ret := _m.Called(ctx, script)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StringCmd); ok {
		r0 = rf(ctx, script)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// Set provides a mock function with given fields: ctx, key, value, expiration
func (_m *Cmdable) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) *v8.StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// SetArgs provides a mock function with given fields: ctx, key, value, a
func (_m *Cmdable) SetArgs(ctx context.Context, key string, value interface{}, a v8.SetArgs) *v8.StatusCmd {
	ret := _m.Called(ctx, key, value, a)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, v8.SetArgs) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, value, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// SetBit provides a mock function with given fields: ctx, key, offset, value
func (_m *Cmdable) SetBit(ctx context.Context, key string, offset int64, value int) *v8.IntCmd {
	ret := _m.Called(ctx, key, offset, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int) *v8.IntCmd); ok {
		r0 = rf(ctx, key, offset, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// SetEX provides a mock function with given fields: ctx, key, value, expiration
func (_m *Cmdable) SetEX(ctx context.Context, key string, value interface{}, expiration time.Duration) *v8.StatusCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v8.StatusCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// SetNX provides a mock function with given fields: ctx, key, value, expiration
func (_m *Cmdable) SetNX(ctx context.Context, key string, value interface{}, expiration time.Duration) *v8.BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// SetRange provides a mock function with given fields: ctx, key, offset, value
func (_m *Cmdable) SetRange(ctx context.Context, key string, offset int64, value string) *v8.IntCmd {
	ret := _m.Called(ctx, key, offset, value)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, offset, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// SetXX provides a mock function with given fields: ctx, key, value, expiration
func (_m *Cmdable) SetXX(ctx context.Context, key string, value interface{}, expiration time.Duration) *v8.BoolCmd {
	ret := _m.Called(ctx, key, value, expiration)

	var r0 *v8.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) *v8.BoolCmd); ok {
		r0 = rf(ctx, key, value, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.BoolCmd)
		}
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx
func (_m *Cmdable) Shutdown(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ShutdownNoSave provides a mock function with given fields: ctx
func (_m *Cmdable) ShutdownNoSave(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// ShutdownSave provides a mock function with given fields: ctx
func (_m *Cmdable) ShutdownSave(ctx context.Context) *v8.StatusCmd {
	ret := _m.Called(ctx)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.StatusCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// SlaveOf provides a mock function with given fields: ctx, host, port
func (_m *Cmdable) SlaveOf(ctx context.Context, host string, port string) *v8.StatusCmd {
	ret := _m.Called(ctx, host, port)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, host, port)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// Sort provides a mock function with given fields: ctx, key, sort
func (_m *Cmdable) Sort(ctx context.Context, key string, sort *v8.Sort) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, sort)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.Sort) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// SortInterfaces provides a mock function with given fields: ctx, key, sort
func (_m *Cmdable) SortInterfaces(ctx context.Context, key string, sort *v8.Sort) *v8.SliceCmd {
	ret := _m.Called(ctx, key, sort)

	var r0 *v8.SliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.Sort) *v8.SliceCmd); ok {
		r0 = rf(ctx, key, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.SliceCmd)
		}
	}

	return r0
}

// SortStore provides a mock function with given fields: ctx, key, store, sort
func (_m *Cmdable) SortStore(ctx context.Context, key string, store string, sort *v8.Sort) *v8.IntCmd {
	ret := _m.Called(ctx, key, store, sort)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *v8.Sort) *v8.IntCmd); ok {
		r0 = rf(ctx, key, store, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// StrLen provides a mock function with given fields: ctx, key
func (_m *Cmdable) StrLen(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// TTL provides a mock function with given fields: ctx, key
func (_m *Cmdable) TTL(ctx context.Context, key string) *v8.DurationCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.DurationCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.DurationCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.DurationCmd)
		}
	}

	return r0
}

// Time provides a mock function with given fields: ctx
func (_m *Cmdable) Time(ctx context.Context) *v8.TimeCmd {
	ret := _m.Called(ctx)

	var r0 *v8.TimeCmd
	if rf, ok := ret.Get(0).(func(context.Context) *v8.TimeCmd); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.TimeCmd)
		}
	}

	return r0
}

// Touch provides a mock function with given fields: ctx, keys
func (_m *Cmdable) Touch(ctx context.Context, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// TxPipeline provides a mock function with given fields:
func (_m *Cmdable) TxPipeline() v8.Pipeliner {
	ret := _m.Called()

	var r0 v8.Pipeliner
	if rf, ok := ret.Get(0).(func() v8.Pipeliner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v8.Pipeliner)
		}
	}

	return r0
}

// TxPipelined provides a mock function with given fields: ctx, fn
func (_m *Cmdable) TxPipelined(ctx context.Context, fn func(v8.Pipeliner) error) ([]v8.Cmder, error) {
	ret := _m.Called(ctx, fn)

	var r0 []v8.Cmder
	if rf, ok := ret.Get(0).(func(context.Context, func(v8.Pipeliner) error) []v8.Cmder); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v8.Cmder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, func(v8.Pipeliner) error) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Type provides a mock function with given fields: ctx, key
func (_m *Cmdable) Type(ctx context.Context, key string) *v8.StatusCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// Unlink provides a mock function with given fields: ctx, keys
func (_m *Cmdable) Unlink(ctx context.Context, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// XAck provides a mock function with given fields: ctx, stream, group, ids
func (_m *Cmdable) XAck(ctx context.Context, stream string, group string, ids ...string) *v8.IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream, group)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, stream, group, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// XAdd provides a mock function with given fields: ctx, a
func (_m *Cmdable) XAdd(ctx context.Context, a *v8.XAddArgs) *v8.StringCmd {
	ret := _m.Called(ctx, a)

	var r0 *v8.StringCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.XAddArgs) *v8.StringCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringCmd)
		}
	}

	return r0
}

// XClaim provides a mock function with given fields: ctx, a
func (_m *Cmdable) XClaim(ctx context.Context, a *v8.XClaimArgs) *v8.XMessageSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *v8.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.XClaimArgs) *v8.XMessageSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XMessageSliceCmd)
		}
	}

	return r0
}

// XClaimJustID provides a mock function with given fields: ctx, a
func (_m *Cmdable) XClaimJustID(ctx context.Context, a *v8.XClaimArgs) *v8.StringSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.XClaimArgs) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// XDel provides a mock function with given fields: ctx, stream, ids
func (_m *Cmdable) XDel(ctx context.Context, stream string, ids ...string) *v8.IntCmd {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, stream)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, stream, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// XGroupCreate provides a mock function with given fields: ctx, stream, group, start
func (_m *Cmdable) XGroupCreate(ctx context.Context, stream string, group string, start string) *v8.StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// XGroupCreateMkStream provides a mock function with given fields: ctx, stream, group, start
func (_m *Cmdable) XGroupCreateMkStream(ctx context.Context, stream string, group string, start string) *v8.StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// XGroupDelConsumer provides a mock function with given fields: ctx, stream, group, consumer
func (_m *Cmdable) XGroupDelConsumer(ctx context.Context, stream string, group string, consumer string) *v8.IntCmd {
	ret := _m.Called(ctx, stream, group, consumer)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, stream, group, consumer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// XGroupDestroy provides a mock function with given fields: ctx, stream, group
func (_m *Cmdable) XGroupDestroy(ctx context.Context, stream string, group string) *v8.IntCmd {
	ret := _m.Called(ctx, stream, group)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// XGroupSetID provides a mock function with given fields: ctx, stream, group, start
func (_m *Cmdable) XGroupSetID(ctx context.Context, stream string, group string, start string) *v8.StatusCmd {
	ret := _m.Called(ctx, stream, group, start)

	var r0 *v8.StatusCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.StatusCmd); ok {
		r0 = rf(ctx, stream, group, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StatusCmd)
		}
	}

	return r0
}

// XInfoConsumers provides a mock function with given fields: ctx, key, group
func (_m *Cmdable) XInfoConsumers(ctx context.Context, key string, group string) *v8.XInfoConsumersCmd {
	ret := _m.Called(ctx, key, group)

	var r0 *v8.XInfoConsumersCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.XInfoConsumersCmd); ok {
		r0 = rf(ctx, key, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XInfoConsumersCmd)
		}
	}

	return r0
}

// XInfoGroups provides a mock function with given fields: ctx, key
func (_m *Cmdable) XInfoGroups(ctx context.Context, key string) *v8.XInfoGroupsCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.XInfoGroupsCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.XInfoGroupsCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XInfoGroupsCmd)
		}
	}

	return r0
}

// XInfoStream provides a mock function with given fields: ctx, key
func (_m *Cmdable) XInfoStream(ctx context.Context, key string) *v8.XInfoStreamCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.XInfoStreamCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.XInfoStreamCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XInfoStreamCmd)
		}
	}

	return r0
}

// XLen provides a mock function with given fields: ctx, stream
func (_m *Cmdable) XLen(ctx context.Context, stream string) *v8.IntCmd {
	ret := _m.Called(ctx, stream)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// XPending provides a mock function with given fields: ctx, stream, group
func (_m *Cmdable) XPending(ctx context.Context, stream string, group string) *v8.XPendingCmd {
	ret := _m.Called(ctx, stream, group)

	var r0 *v8.XPendingCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.XPendingCmd); ok {
		r0 = rf(ctx, stream, group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XPendingCmd)
		}
	}

	return r0
}

// XPendingExt provides a mock function with given fields: ctx, a
func (_m *Cmdable) XPendingExt(ctx context.Context, a *v8.XPendingExtArgs) *v8.XPendingExtCmd {
	ret := _m.Called(ctx, a)

	var r0 *v8.XPendingExtCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.XPendingExtArgs) *v8.XPendingExtCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XPendingExtCmd)
		}
	}

	return r0
}

// XRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *Cmdable) XRange(ctx context.Context, stream string, start string, stop string) *v8.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	var r0 *v8.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XMessageSliceCmd)
		}
	}

	return r0
}

// XRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *Cmdable) XRangeN(ctx context.Context, stream string, start string, stop string, count int64) *v8.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	var r0 *v8.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *v8.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XMessageSliceCmd)
		}
	}

	return r0
}

// XRead provides a mock function with given fields: ctx, a
func (_m *Cmdable) XRead(ctx context.Context, a *v8.XReadArgs) *v8.XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *v8.XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.XReadArgs) *v8.XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XStreamSliceCmd)
		}
	}

	return r0
}

// XReadGroup provides a mock function with given fields: ctx, a
func (_m *Cmdable) XReadGroup(ctx context.Context, a *v8.XReadGroupArgs) *v8.XStreamSliceCmd {
	ret := _m.Called(ctx, a)

	var r0 *v8.XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.XReadGroupArgs) *v8.XStreamSliceCmd); ok {
		r0 = rf(ctx, a)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XStreamSliceCmd)
		}
	}

	return r0
}

// XReadStreams provides a mock function with given fields: ctx, streams
func (_m *Cmdable) XReadStreams(ctx context.Context, streams ...string) *v8.XStreamSliceCmd {
	_va := make([]interface{}, len(streams))
	for _i := range streams {
		_va[_i] = streams[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.XStreamSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.XStreamSliceCmd); ok {
		r0 = rf(ctx, streams...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XStreamSliceCmd)
		}
	}

	return r0
}

// XRevRange provides a mock function with given fields: ctx, stream, start, stop
func (_m *Cmdable) XRevRange(ctx context.Context, stream string, start string, stop string) *v8.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop)

	var r0 *v8.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XMessageSliceCmd)
		}
	}

	return r0
}

// XRevRangeN provides a mock function with given fields: ctx, stream, start, stop, count
func (_m *Cmdable) XRevRangeN(ctx context.Context, stream string, start string, stop string, count int64) *v8.XMessageSliceCmd {
	ret := _m.Called(ctx, stream, start, stop, count)

	var r0 *v8.XMessageSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64) *v8.XMessageSliceCmd); ok {
		r0 = rf(ctx, stream, start, stop, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.XMessageSliceCmd)
		}
	}

	return r0
}

// XTrim provides a mock function with given fields: ctx, key, maxLen
func (_m *Cmdable) XTrim(ctx context.Context, key string, maxLen int64) *v8.IntCmd {
	ret := _m.Called(ctx, key, maxLen)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, maxLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// XTrimApprox provides a mock function with given fields: ctx, key, maxLen
func (_m *Cmdable) XTrimApprox(ctx context.Context, key string, maxLen int64) *v8.IntCmd {
	ret := _m.Called(ctx, key, maxLen)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, maxLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZAdd provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZAdd(ctx context.Context, key string, members ...*v8.Z) *v8.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*v8.Z) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZAddCh provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZAddCh(ctx context.Context, key string, members ...*v8.Z) *v8.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*v8.Z) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZAddNX provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZAddNX(ctx context.Context, key string, members ...*v8.Z) *v8.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*v8.Z) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZAddNXCh provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZAddNXCh(ctx context.Context, key string, members ...*v8.Z) *v8.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*v8.Z) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZAddXX provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZAddXX(ctx context.Context, key string, members ...*v8.Z) *v8.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*v8.Z) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZAddXXCh provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZAddXXCh(ctx context.Context, key string, members ...*v8.Z) *v8.IntCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*v8.Z) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZCard provides a mock function with given fields: ctx, key
func (_m *Cmdable) ZCard(ctx context.Context, key string) *v8.IntCmd {
	ret := _m.Called(ctx, key)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZCount provides a mock function with given fields: ctx, key, min, max
func (_m *Cmdable) ZCount(ctx context.Context, key string, min string, max string) *v8.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZDiff provides a mock function with given fields: ctx, keys
func (_m *Cmdable) ZDiff(ctx context.Context, keys ...string) *v8.StringSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZDiffStore provides a mock function with given fields: ctx, destination, keys
func (_m *Cmdable) ZDiffStore(ctx context.Context, destination string, keys ...string) *v8.IntCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, destination)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.IntCmd); ok {
		r0 = rf(ctx, destination, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZDiffWithScores provides a mock function with given fields: ctx, keys
func (_m *Cmdable) ZDiffWithScores(ctx context.Context, keys ...string) *v8.ZSliceCmd {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, ...string) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZIncr provides a mock function with given fields: ctx, key, member
func (_m *Cmdable) ZIncr(ctx context.Context, key string, member *v8.Z) *v8.FloatCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.Z) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// ZIncrBy provides a mock function with given fields: ctx, key, increment, member
func (_m *Cmdable) ZIncrBy(ctx context.Context, key string, increment float64, member string) *v8.FloatCmd {
	ret := _m.Called(ctx, key, increment, member)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, float64, string) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, increment, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// ZIncrNX provides a mock function with given fields: ctx, key, member
func (_m *Cmdable) ZIncrNX(ctx context.Context, key string, member *v8.Z) *v8.FloatCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.Z) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// ZIncrXX provides a mock function with given fields: ctx, key, member
func (_m *Cmdable) ZIncrXX(ctx context.Context, key string, member *v8.Z) *v8.FloatCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.Z) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// ZInter provides a mock function with given fields: ctx, store
func (_m *Cmdable) ZInter(ctx context.Context, store *v8.ZStore) *v8.StringSliceCmd {
	ret := _m.Called(ctx, store)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.ZStore) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZInterStore provides a mock function with given fields: ctx, destination, store
func (_m *Cmdable) ZInterStore(ctx context.Context, destination string, store *v8.ZStore) *v8.IntCmd {
	ret := _m.Called(ctx, destination, store)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZStore) *v8.IntCmd); ok {
		r0 = rf(ctx, destination, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZInterWithScores provides a mock function with given fields: ctx, store
func (_m *Cmdable) ZInterWithScores(ctx context.Context, store *v8.ZStore) *v8.ZSliceCmd {
	ret := _m.Called(ctx, store)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, *v8.ZStore) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZLexCount provides a mock function with given fields: ctx, key, min, max
func (_m *Cmdable) ZLexCount(ctx context.Context, key string, min string, max string) *v8.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZMScore provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZMScore(ctx context.Context, key string, members ...string) *v8.FloatSliceCmd {
	_va := make([]interface{}, len(members))
	for _i := range members {
		_va[_i] = members[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.FloatSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *v8.FloatSliceCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatSliceCmd)
		}
	}

	return r0
}

// ZPopMax provides a mock function with given fields: ctx, key, count
func (_m *Cmdable) ZPopMax(ctx context.Context, key string, count ...int64) *v8.ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZPopMin provides a mock function with given fields: ctx, key, count
func (_m *Cmdable) ZPopMin(ctx context.Context, key string, count ...int64) *v8.ZSliceCmd {
	_va := make([]interface{}, len(count))
	for _i := range count {
		_va[_i] = count[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...int64) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, key, count...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZRandMember provides a mock function with given fields: ctx, key, count, withScores
func (_m *Cmdable) ZRandMember(ctx context.Context, key string, count int, withScores bool) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, count, withScores)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, count, withScores)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZRange provides a mock function with given fields: ctx, key, start, stop
func (_m *Cmdable) ZRange(ctx context.Context, key string, start int64, stop int64) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *Cmdable) ZRangeByLex(ctx context.Context, key string, opt *v8.ZRangeBy) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZRangeBy) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *Cmdable) ZRangeByScore(ctx context.Context, key string, opt *v8.ZRangeBy) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZRangeBy) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *Cmdable) ZRangeByScoreWithScores(ctx context.Context, key string, opt *v8.ZRangeBy) *v8.ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZRangeBy) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *Cmdable) ZRangeWithScores(ctx context.Context, key string, start int64, stop int64) *v8.ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZRank provides a mock function with given fields: ctx, key, member
func (_m *Cmdable) ZRank(ctx context.Context, key string, member string) *v8.IntCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZRem provides a mock function with given fields: ctx, key, members
func (_m *Cmdable) ZRem(ctx context.Context, key string, members ...interface{}) *v8.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, members...)
	ret := _m.Called(_ca...)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *v8.IntCmd); ok {
		r0 = rf(ctx, key, members...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZRemRangeByLex provides a mock function with given fields: ctx, key, min, max
func (_m *Cmdable) ZRemRangeByLex(ctx context.Context, key string, min string, max string) *v8.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZRemRangeByRank provides a mock function with given fields: ctx, key, start, stop
func (_m *Cmdable) ZRemRangeByRank(ctx context.Context, key string, start int64, stop int64) *v8.IntCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.IntCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZRemRangeByScore provides a mock function with given fields: ctx, key, min, max
func (_m *Cmdable) ZRemRangeByScore(ctx context.Context, key string, min string, max string) *v8.IntCmd {
	ret := _m.Called(ctx, key, min, max)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, min, max)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZRevRange provides a mock function with given fields: ctx, key, start, stop
func (_m *Cmdable) ZRevRange(ctx context.Context, key string, start int64, stop int64) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZRevRangeByLex provides a mock function with given fields: ctx, key, opt
func (_m *Cmdable) ZRevRangeByLex(ctx context.Context, key string, opt *v8.ZRangeBy) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZRangeBy) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZRevRangeByScore provides a mock function with given fields: ctx, key, opt
func (_m *Cmdable) ZRevRangeByScore(ctx context.Context, key string, opt *v8.ZRangeBy) *v8.StringSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *v8.StringSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZRangeBy) *v8.StringSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.StringSliceCmd)
		}
	}

	return r0
}

// ZRevRangeByScoreWithScores provides a mock function with given fields: ctx, key, opt
func (_m *Cmdable) ZRevRangeByScoreWithScores(ctx context.Context, key string, opt *v8.ZRangeBy) *v8.ZSliceCmd {
	ret := _m.Called(ctx, key, opt)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZRangeBy) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, key, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZRevRangeWithScores provides a mock function with given fields: ctx, key, start, stop
func (_m *Cmdable) ZRevRangeWithScores(ctx context.Context, key string, start int64, stop int64) *v8.ZSliceCmd {
	ret := _m.Called(ctx, key, start, stop)

	var r0 *v8.ZSliceCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, int64) *v8.ZSliceCmd); ok {
		r0 = rf(ctx, key, start, stop)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ZSliceCmd)
		}
	}

	return r0
}

// ZRevRank provides a mock function with given fields: ctx, key, member
func (_m *Cmdable) ZRevRank(ctx context.Context, key string, member string) *v8.IntCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.IntCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

// ZScan provides a mock function with given fields: ctx, key, cursor, match, count
func (_m *Cmdable) ZScan(ctx context.Context, key string, cursor uint64, match string, count int64) *v8.ScanCmd {
	ret := _m.Called(ctx, key, cursor, match, count)

	var r0 *v8.ScanCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, string, int64) *v8.ScanCmd); ok {
		r0 = rf(ctx, key, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.ScanCmd)
		}
	}

	return r0
}

// ZScore provides a mock function with given fields: ctx, key, member
func (_m *Cmdable) ZScore(ctx context.Context, key string, member string) *v8.FloatCmd {
	ret := _m.Called(ctx, key, member)

	var r0 *v8.FloatCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *v8.FloatCmd); ok {
		r0 = rf(ctx, key, member)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.FloatCmd)
		}
	}

	return r0
}

// ZUnionStore provides a mock function with given fields: ctx, dest, store
func (_m *Cmdable) ZUnionStore(ctx context.Context, dest string, store *v8.ZStore) *v8.IntCmd {
	ret := _m.Called(ctx, dest, store)

	var r0 *v8.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, *v8.ZStore) *v8.IntCmd); ok {
		r0 = rf(ctx, dest, store)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v8.IntCmd)
		}
	}

	return r0
}

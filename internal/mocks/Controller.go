// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	model "github.com/gotway/gotway/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// CreateService provides a mock function with given fields: _a0
func (_m *Controller) CreateService(_a0 model.Service) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Service) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteService provides a mock function with given fields: key
func (_m *Controller) DeleteService(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetService provides a mock function with given fields: key
func (_m *Controller) GetService(key string) (model.Service, error) {
	ret := _m.Called(key)

	var r0 model.Service
	if rf, ok := ret.Get(0).(func(string) model.Service); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(model.Service)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields:
func (_m *Controller) GetServices() ([]model.Service, error) {
	ret := _m.Called()

	var r0 []model.Service
	if rf, ok := ret.Get(0).(func() []model.Service); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertService provides a mock function with given fields: _a0
func (_m *Controller) UpsertService(_a0 model.Service) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Service) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	model "github.com/gotway/gotway/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ServiceController is an autogenerated mock type for the ServiceController type
type ServiceController struct {
	mock.Mock
}

// DeleteService provides a mock function with given fields: key
func (_m *ServiceController) DeleteService(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllServiceKeys provides a mock function with given fields:
func (_m *ServiceController) GetAllServiceKeys() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetService provides a mock function with given fields: key
func (_m *ServiceController) GetService(key string) (model.Service, error) {
	ret := _m.Called(key)

	var r0 model.Service
	if rf, ok := ret.Get(0).(func(string) model.Service); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(model.Service)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetail provides a mock function with given fields: key
func (_m *ServiceController) GetServiceDetail(key string) (model.ServiceDetail, error) {
	ret := _m.Called(key)

	var r0 model.ServiceDetail
	if rf, ok := ret.Get(0).(func(string) model.ServiceDetail); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(model.ServiceDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: offset, limit
func (_m *ServiceController) GetServices(offset int, limit int) (model.ServicePage, error) {
	ret := _m.Called(offset, limit)

	var r0 model.ServicePage
	if rf, ok := ret.Get(0).(func(int, int) model.ServicePage); ok {
		r0 = rf(offset, limit)
	} else {
		r0 = ret.Get(0).(model.ServicePage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterService provides a mock function with given fields: serviceDetail
func (_m *ServiceController) RegisterService(serviceDetail model.ServiceDetail) error {
	ret := _m.Called(serviceDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ServiceDetail) error); ok {
		r0 = rf(serviceDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReverseProxy provides a mock function with given fields: w, r, service, handler
func (_m *ServiceController) ReverseProxy(w http.ResponseWriter, r *http.Request, service model.Service, handler func(string, *http.Response) error) error {
	ret := _m.Called(w, r, service, handler)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, model.Service, func(string, *http.Response) error) error); ok {
		r0 = rf(w, r, service, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceStatus provides a mock function with given fields: key, status
func (_m *ServiceController) UpdateServiceStatus(key string, status model.ServiceStatus) error {
	ret := _m.Called(key, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.ServiceStatus) error); ok {
		r0 = rf(key, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	model "github.com/gotway/gotway/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ServiceRepo is an autogenerated mock type for the ServiceRepo type
type ServiceRepo struct {
	mock.Mock
}

// DeleteService provides a mock function with given fields: key
func (_m *ServiceRepo) DeleteService(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllServiceKeys provides a mock function with given fields:
func (_m *ServiceRepo) GetAllServiceKeys() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetService provides a mock function with given fields: key
func (_m *ServiceRepo) GetService(key string) (model.Service, error) {
	ret := _m.Called(key)

	var r0 model.Service
	if rf, ok := ret.Get(0).(func(string) model.Service); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(model.Service)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceCache provides a mock function with given fields: key
func (_m *ServiceRepo) GetServiceCache(key string) (model.CacheConfig, error) {
	ret := _m.Called(key)

	var r0 model.CacheConfig
	if rf, ok := ret.Get(0).(func(string) model.CacheConfig); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(model.CacheConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetail provides a mock function with given fields: key
func (_m *ServiceRepo) GetServiceDetail(key string) (model.ServiceDetail, error) {
	ret := _m.Called(key)

	var r0 model.ServiceDetail
	if rf, ok := ret.Get(0).(func(string) model.ServiceDetail); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(model.ServiceDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: keys
func (_m *ServiceRepo) GetServices(keys ...string) ([]model.Service, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []model.Service
	if rf, ok := ret.Get(0).(func(...string) []model.Service); ok {
		r0 = rf(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsCacheableStatusCode provides a mock function with given fields: key, statusCode
func (_m *ServiceRepo) IsCacheableStatusCode(key string, statusCode int) bool {
	ret := _m.Called(key, statusCode)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int) bool); ok {
		r0 = rf(key, statusCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StoreService provides a mock function with given fields: service
func (_m *ServiceRepo) StoreService(service model.ServiceDetail) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ServiceDetail) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServicesStatus provides a mock function with given fields: status, keys
func (_m *ServiceRepo) UpdateServicesStatus(status model.ServiceStatus, keys ...string) error {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, status)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.ServiceStatus, ...string) error); ok {
		r0 = rf(status, keys...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

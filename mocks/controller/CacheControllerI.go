// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	core "github.com/gotway/gotway/core"

	mock "github.com/stretchr/testify/mock"
)

// CacheControllerI is an autogenerated mock type for the CacheControllerI type
type CacheControllerI struct {
	mock.Mock
}

// DeleteCacheByPath provides a mock function with given fields: paths
func (_m *CacheControllerI) DeleteCacheByPath(paths []core.CachePath) error {
	ret := _m.Called(paths)

	var r0 error
	if rf, ok := ret.Get(0).(func([]core.CachePath) error); ok {
		r0 = rf(paths)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCacheByTags provides a mock function with given fields: tags
func (_m *CacheControllerI) DeleteCacheByTags(tags []string) error {
	ret := _m.Called(tags)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(tags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCache provides a mock function with given fields: r, serviceKey
func (_m *CacheControllerI) GetCache(r *http.Request, serviceKey string) (core.Cache, error) {
	ret := _m.Called(r, serviceKey)

	var r0 core.Cache
	if rf, ok := ret.Get(0).(func(*http.Request, string) core.Cache); ok {
		r0 = rf(r, serviceKey)
	} else {
		r0 = ret.Get(0).(core.Cache)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCacheDetail provides a mock function with given fields: r, serviceKey
func (_m *CacheControllerI) GetCacheDetail(r *http.Request, serviceKey string) (core.CacheDetail, error) {
	ret := _m.Called(r, serviceKey)

	var r0 core.CacheDetail
	if rf, ok := ret.Get(0).(func(*http.Request, string) core.CacheDetail); ok {
		r0 = rf(r, serviceKey)
	} else {
		r0 = ret.Get(0).(core.CacheDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*http.Request, string) error); ok {
		r1 = rf(r, serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleResponse provides a mock function with given fields: serviceKey, r
func (_m *CacheControllerI) HandleResponse(serviceKey string, r *http.Response) error {
	ret := _m.Called(serviceKey, r)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *http.Response) error); ok {
		r0 = rf(serviceKey, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsCacheableRequest provides a mock function with given fields: r
func (_m *CacheControllerI) IsCacheableRequest(r *http.Request) bool {
	ret := _m.Called(r)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Request) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListenResponses provides a mock function with given fields:
func (_m *CacheControllerI) ListenResponses() {
	_m.Called()
}

// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	http "net/http"

	core "github.com/gotway/gotway/core"

	mock "github.com/stretchr/testify/mock"
)

// ServiceControllerI is an autogenerated mock type for the ServiceControllerI type
type ServiceControllerI struct {
	mock.Mock
}

// DeleteService provides a mock function with given fields: key
func (_m *ServiceControllerI) DeleteService(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllServiceKeys provides a mock function with given fields:
func (_m *ServiceControllerI) GetAllServiceKeys() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetService provides a mock function with given fields: key
func (_m *ServiceControllerI) GetService(key string) (core.Service, error) {
	ret := _m.Called(key)

	var r0 core.Service
	if rf, ok := ret.Get(0).(func(string) core.Service); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(core.Service)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceDetail provides a mock function with given fields: key
func (_m *ServiceControllerI) GetServiceDetail(key string) (core.ServiceDetail, error) {
	ret := _m.Called(key)

	var r0 core.ServiceDetail
	if rf, ok := ret.Get(0).(func(string) core.ServiceDetail); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(core.ServiceDetail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: offset, limit
func (_m *ServiceControllerI) GetServices(offset int, limit int) (core.ServicePage, error) {
	ret := _m.Called(offset, limit)

	var r0 core.ServicePage
	if rf, ok := ret.Get(0).(func(int, int) core.ServicePage); ok {
		r0 = rf(offset, limit)
	} else {
		r0 = ret.Get(0).(core.ServicePage)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterService provides a mock function with given fields: serviceDetail
func (_m *ServiceControllerI) RegisterService(serviceDetail core.ServiceDetail) error {
	ret := _m.Called(serviceDetail)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.ServiceDetail) error); ok {
		r0 = rf(serviceDetail)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReverseProxy provides a mock function with given fields: w, r, service
func (_m *ServiceControllerI) ReverseProxy(w http.ResponseWriter, r *http.Request, service core.Service) error {
	ret := _m.Called(w, r, service)

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, core.Service) error); ok {
		r0 = rf(w, r, service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceStatus provides a mock function with given fields: key, status
func (_m *ServiceControllerI) UpdateServiceStatus(key string, status core.ServiceStatus) {
	_m.Called(key, status)
}

// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	core "github.com/gotway/gotway/core"
	mock "github.com/stretchr/testify/mock"
)

// CacheConfigRepositoryI is an autogenerated mock type for the CacheConfigRepositoryI type
type CacheConfigRepositoryI struct {
	mock.Mock
}

// DeleteConfig provides a mock function with given fields: serviceKey
func (_m *CacheConfigRepositoryI) DeleteConfig(serviceKey string) error {
	ret := _m.Called(serviceKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(serviceKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfig provides a mock function with given fields: serviceKey
func (_m *CacheConfigRepositoryI) GetConfig(serviceKey string) (core.CacheConfig, error) {
	ret := _m.Called(serviceKey)

	var r0 core.CacheConfig
	if rf, ok := ret.Get(0).(func(string) core.CacheConfig); ok {
		r0 = rf(serviceKey)
	} else {
		r0 = ret.Get(0).(core.CacheConfig)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(serviceKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsCacheableStatusCode provides a mock function with given fields: serviceKey, statusCode
func (_m *CacheConfigRepositoryI) IsCacheableStatusCode(serviceKey string, statusCode int) bool {
	ret := _m.Called(serviceKey, statusCode)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, int) bool); ok {
		r0 = rf(serviceKey, statusCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StoreConfig provides a mock function with given fields: config, serviceKey
func (_m *CacheConfigRepositoryI) StoreConfig(config core.CacheConfig, serviceKey string) error {
	ret := _m.Called(config, serviceKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.CacheConfig, string) error); ok {
		r0 = rf(config, serviceKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

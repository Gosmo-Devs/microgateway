// Code generated by mockery v2.3.0. DO NOT EDIT.

package mocks

import (
	core "github.com/gotway/gotway/core"
	mock "github.com/stretchr/testify/mock"
)

// ServiceRepositoryI is an autogenerated mock type for the ServiceRepositoryI type
type ServiceRepositoryI struct {
	mock.Mock
}

// DeleteService provides a mock function with given fields: key
func (_m *ServiceRepositoryI) DeleteService(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistService provides a mock function with given fields: key
func (_m *ServiceRepositoryI) ExistService(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllServiceKeys provides a mock function with given fields:
func (_m *ServiceRepositoryI) GetAllServiceKeys() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetService provides a mock function with given fields: key
func (_m *ServiceRepositoryI) GetService(key string) (core.Service, error) {
	ret := _m.Called(key)

	var r0 core.Service
	if rf, ok := ret.Get(0).(func(string) core.Service); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(core.Service)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServices provides a mock function with given fields: keys
func (_m *ServiceRepositoryI) GetServices(keys ...string) ([]core.Service, error) {
	_va := make([]interface{}, len(keys))
	for _i := range keys {
		_va[_i] = keys[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []core.Service
	if rf, ok := ret.Get(0).(func(...string) []core.Service); ok {
		r0 = rf(keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...string) error); ok {
		r1 = rf(keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreService provides a mock function with given fields: service
func (_m *ServiceRepositoryI) StoreService(service core.Service) error {
	ret := _m.Called(service)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Service) error); ok {
		r0 = rf(service)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateServiceStatus provides a mock function with given fields: key, status
func (_m *ServiceRepositoryI) UpdateServiceStatus(key string, status core.ServiceStatus) {
	_m.Called(key, status)
}
